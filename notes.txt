https://github.com/matheusbattisti/curso_react

O que é React?

- Uma biblioteca p/ desenvolvimento de aplicações front-end
- Estas aplicações são chamadas de SPA (Single Page Application)
- Arquitetura baseada em componentes
- Pode ser inserido em uma aplicação (CDNs por exemplo) ou podemos criar a aplicação apenas com React
- Mantido pela Meta

O que é o Node.js?

- Uma runtime de JavaScript (uma biblioteca utilizada por um compilador durante a execução do programa)
- Está construída na V8 engine (escrita em C++) da Google
- Possibilita criar softwares em JS no lado do servidor
- Enfim, temos um código JS rodando em C++ para garantir alta performance
- Download feito no site oficial: nodejs.org
- Baixar o arquivio .msi (instalador)
- npm vem junto do Node
- Testar o Node e o npm em um terminal, para validar após a instalação (node -v e npm -v)
- Os binários precisam estar no PATH
- Versão LTS (Long term support), será mantido por bastante tempo (raramente apresentará erros). Versão CURRENT, não muito diferente da LTS, traz todas as últimas adicões da plataforma

Instalação Node Linux

- Download do Node.js no site oficial: nodejs.org
- Verificar a instalação: nodejs -v 
- Instalação: sudo apt install npm 

O que é NPM?

- É um gerenciador de pacotes do Node
- Podemos utilizar bibliotecas de terceiros, baixando pelo npm
- Também podemos executar determinados scripts no nosso programa
- Dificilmente um software em Node.js não utiliza o npm
- Os módulos externos ficam numa pasta chamada node_modules (que deve ser descartável, ou seja, a cada instalação do projeto baixamos todos os pacotes novamente)

Introdução ao React

- Para criar as aplicações React, utilizamos o executor de scripts do Node, o npx
- Com o comando: npx create-react-app <nome>
- Iniciamos a aplicação com npm start

Estrutura base

- Há algumas pastas e arquivos chave para o desenvolvimento em React
- node_modules: onde as dependências do projeto ficam
- public: assets estáticos e HTML de inicialização
- src: onde vamos programas as apps
- src/index.js: arquivo de inicialização do React
- src/App.js: componente principal da aplicação

Extensão para React

ES7 + React/Redux/React-Native snippets
Autor: dsznajder

ext install dsznajder.es7-react-js-snippets

https://github.com/ults-io/vscode-react-javascript-snippets/blob/HEAD/docs/Snippets.md

----------------

Emmet -> extensão nativa do VS Code -> ajuda escrever HTML mais rápido

Precisa configurar: File > Settings > procurar por Emmet

Em Emmet: include languages > adicionar item > item: javascript e valor: javascriptreact

----------------

FUNDAMENTOS

- Na maioria dos projetos os componentes ficam na pasta components
- Geralmente são nomeados como camel case: FirstComponent.js
- No componente criamos a função e a exportamos para utilizá-lo

JSX
- É o HTML do React
- Onde iremos declarar as tags HTML que serão exibidas
- Ficam dentro do return do componente
- Temos algumas diferenças do HTML, por exemplo: class será className
- JSX é JavaScript
- O JSX pode ter apenas um elemento pai

Comentários

{/* seu comentário aqui */} de dentro do return
// seu comentário de dentro da função

Template Expressions

- Recurso para executar JS no JSX e também interpolar variáveis
- sintaxe: { algumCodigoEmJS }
- Tudo entre chaves é processado em JavaScript e retorna um resultado


Hierarquia de componentes

- Os componentes que criamos podem ser utilizados em vários componentes
- Podem formar uma hierarquia, sendo importados uns dentro dos outros, como fizemos no App.js

Evento de click

- Os eventos para o front-end são essenciais
- Em várias situações vamos precisar do click, como ao enviar formulários
- No React os eventos já estão "prontos", podemos utilizar onClick p/ ativar uma função ao clicar em um elemento
- Esta função é criada na própria função do componente
- As funções geralmente tem o padrão handleAlgumaCoisa
- Quando as funções são simples, podemos realizar a lógica no próprio evento
- Isso torna o código um pouco desorganizado ou confuso. Mas em algumas situações é aplicável

Funções de renderização

- Funções podem contem retorno de elementos JSX e serem chamadas diretamente em outros elements JSX. Exemplo: {renderSomething()}, {renderSomething(true)}


----------------------

AVANÇANDO NO REACT

Imagens no React

- Imagens públicas do projeto podem ficar na pasta public
- podem ser chamadas diretamente pelo /nome.jpg
- A pasta public fica lincada com o src das imagens. Ex:
<img src="/nome-imagem.jpg" alt="Descrição da imagem" />
- Imagens que estão dentro de src
- Boa prática colocar dentro de src/assets. Daí precisa ser importada (src dinâmico)
- import Logo from "./assets/logo.jpg"
<img src={Logo} alt="Logo da empresa" />

O que são hooks?

- Recursos do React que tem várias funções
- p/ guardar e alterar o estado de algum dado da nossa aplicação
- Todos os hooks começam com "use". Exemplo useState
- Podemos criar nosso próprios hooks, chamados de custom hook
- Hooks precisam ser importados
- Geralmente são úteis em todas as aplicações

useState hook

- O hook de useState é um dos mais utilizados
- Utilizado p/ gerenciar o estado de algum dado, pois variáveis não funcionam corretamente, o componente não RE-renderiza
- Utilizamos o setNome para alterar o valor

Renderização de lista

- Fazemos isso com o tipo array
- Utilizamos o método map para nos auxiliar
- Além dos dados podemos inser JSX em cada iteração
- Iterar listas sem a propriedade key, gera um warning (ver console)
- O React precisa de uma chave única em cada um dos itens iterados
- Serve p/ ajudar na renderização do componente
- Geralmente se tem um array de objetos e podemos colocar key como alguma chave única, como o id de algum dado
- Em último caso devemos utilizar o index do método map

Previous state
- É um recurso que nos permite pegar o dado em seu valor original, dentro de um set de dado
- É muito utilizado para modificar listas, pois temos o valor antigo transformado em um novo valor
- O primeiro argumento de um set sempre será o previous state

Renderização condicional
- Renderização condicional é quando imprimimos uma parte do template baseado em uma condição (checagem com if)
- Interessante usar em várias situações, como usuário autenticado/não autenticado

Adicionando if/else
- Podemos realizar if/else no JSX
- Devemos usar if ternário
- sintaxe: condição ? bloco1 : bloco2

Props
- Props é um recurso fundamento do React
- Nos permite passar valores de um componente pai para um componente filho
- Bastante útil quando os dados vierem de um banco de dados, por exemplo
- As props vem num objeto no argumento da função do componente

Desestruturando props
- É super comum passar mais de uma prop em um componente
- Para isso usamos o recursos destructuring
- Se temos duas props: name e age, podemos fazer assim: function MyComponent({name, age})
- Agora não precisamos mais utilizar props.algumaCoisa

Reutilização de componentes
- Com props, a reutilização de componentes começa a fazer muito sentido
- Se temos os dados de 1000 carros por exemplo, podemos reaproveitar o nosso CarDetails 1000 vezes
- Isso torno o código mais padronizado, facilitando a manutenção

Reutilização com loop
- Os arrays de dados podem ter muitos itens. O correto é usar o map
- Com isso conseguimos conciliar os 3 conceitos: renderização de listas, reaproveitamento de componentes e props

React Fragments
- Os React fragments são interessantes para quando precisamos ter mais de um elemento pai em um componente
- Criamos uma tag vazia: <> </> Ela serve como elemento pai, não alterando a estrutura do HTML com div, por exemplo

Children prop
- Children prop é um recurso utilizado para quando um componente precisa ter JSX dentro dele
- Esse JSX vem do componente pai
- Então o componente age como um container
- E children é considerada uma prop do componente

Funções em props
- As funções podem ser passadas para as props normalmente
- Basta criar a função no componente pai e enviar como prop para o componente 
- No componente filho ela pode ser ativada por um evento, por exemplo

Elevação de state
- Elevação de state ou State lift é quando um valor é elevado do componente filho para o componente pai
- geralmente temos um componente que usa o state e outro que o altera

CSS Global
- O CSS global é utilizado para estilizar diversos elementos em comum ou fazer um reset no CSS
- Utilizamos o index.css para isso
- Ele está na pasta src

CSS do componente
- O CSS do componente é utilizado para um componente específico
- geralmente é criado um arquivo com o mesmo nome do componente
- Note que este método não é scoped, oue seja, o CSS vaza para outros componentes se houver uma regra em colisão
- O React já cria um exemplo desta técnica com o App.css/js

Inline style
- O inline style do React é igual o do CSS
- Por meio do atributo style conseguimos aplicar regras diretamente em um elemento
- Devemos optar por outras maneiras de CSS, inline pode dificultar a manutenção ou deixar o código imprevisível em algumas situações

Inline style dinâmico
- O CSS dinâmico inline aplica estilo baseado em uma condicional
- Vamos inserir no atributo um if ternário
- Dependendo da condição podemos mudar que regras de estilo um elemento recebe

Class dinâmicas no CSS
- Podemos também aplicar lógica para mudar a classe de CSS de um elemento
- Também utilizaremos o if ternário
- Essa abordagem é mais interessante que o CSS inline
- Pois as classes estarão isoladas no arquivo de CSS, resolvendo o problema de organização do código

CSS Modules
- O CSS Modules é um recurso de CSS scoped, ou seja, ele vai ser EXCLUSIVO do componente
- O nome do arquivo é: Componente.module.css
- Também devemos importá-lo no componente